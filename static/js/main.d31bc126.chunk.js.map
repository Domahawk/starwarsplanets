{"version":3,"sources":["components/Residents.js","components/Planet.js","components/PlanetList.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Residents","residents","setID","keyI","stateID","useState","resident","setResident","useEffect","fetch","then","resp","json","data","className","onClick","name","height","hair_color","birth_year","gender","Planet","population","gravity","terrain","childID","setChildID","index","residentListComponent","map","i","PlanetList","planetsforchild","planetListComponent","planet","App","state","planets","setState","results","this","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2TA2CeA,EAxCG,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,UAAWC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,QACzC,EAAkCC,mBAASJ,GAA3C,mBAAQK,EAAR,KAAkBC,EAAlB,KAEAC,qBAAU,kBACNC,MAAMR,GACLS,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAG,GAAI,OAAIN,EAAYM,SAa9B,OACI,sBAAKC,UAAU,mBAAf,UACI,8BACG,oBAAGA,UAAU,YAAYC,QAbX,WAEjBb,EADAE,IAAYD,EACNA,EAEA,KASH,cAAsDG,EAASU,UAEjEZ,IAAYD,GAAS,KACrBC,IAAYD,GACb,8BACI,sBAAKW,UAAU,eAAf,UACI,yCAAYR,EAASW,UACrB,6CAAgBX,EAASY,cACzB,6CAAgBZ,EAASa,cACzB,yCAAYb,EAASc,mBCQ1BC,G,MAtCA,SAAC,GAAuD,IAArDL,EAAoD,EAApDA,KAAMM,EAA8C,EAA9CA,WAAYC,EAAkC,EAAlCA,QAASC,EAAyB,EAAzBA,QAASvB,EAAgB,EAAhBA,UAEpD,EAAgCI,mBAAS,IAAzC,mBAAQoB,EAAR,KAAiBC,EAAjB,KAEMxB,EAAQ,SAACyB,GACbD,EAAWC,IAGPC,EAAwB3B,EAAU4B,KAAI,SAAC5B,EAAW6B,GAEpD,OAAO,cAAC,EAAD,CAEP3B,KAAM2B,EACN7B,UAAWA,EACXC,MAAOA,EACPE,QAASqB,GAJJK,MAOT,OACE,qBAAKhB,UAAU,YAAf,SACE,sBAAKA,UAAU,mBAAf,UACE,oBAAIA,UAAU,aAAd,SAA4BE,IAC5B,sBAAKF,UAAU,cAAf,UACE,6CACA,4BAAIQ,IACJ,0CACA,4BAAIC,IACJ,0CACA,4BAAIC,IACJ,uDACA,8BAAMI,cCZDG,G,MAjBI,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,gBACZC,EAAsBD,EAAgBH,KAAI,SAACK,EAAQJ,GACrD,OAAO,cAAC,EAAD,CAEHd,KAAQgB,EAAgBF,GAAGd,KAC3BM,WAAcU,EAAgBF,GAAGR,WACjCC,QAAWS,EAAgBF,GAAGP,QAC9BC,QAAWQ,EAAgBF,GAAGN,QAC9BvB,UAAa+B,EAAgBF,GAAG7B,WALzB6B,MAOf,OACA,qBAAKhB,UAAU,aAAf,SACKmB,MCsBME,E,kDAjCb,aAAgB,IAAD,8BACb,gBACKC,MAAQ,CACXC,QAAS,IAHE,E,qDAOf,WAAsB,IAAD,OACnB5B,MAAM,uCACLC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAG,GAAS,EAAKyB,SAAS,CAAED,QAASxB,EAAK0B,e,oBAG/C,WACE,IAAQF,EAAYG,KAAKJ,MAAjBC,QACR,OACE,sBAAKvB,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,mFAGA,sBAAKA,UAAU,UAAf,UACE,qBAAKA,UAAU,QAAf,SACE,qBAAIA,UAAU,UAAd,uBAAkC,uBAAlC,gBAEF,qBAAKA,UAAU,oBAAf,SACE,cAAC,EAAD,CAAYkB,gBAAmBK,gB,GA3BzBI,aCQHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBlC,MAAK,YAAkD,IAA/CmC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d31bc126.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport './Residents.css'\r\n\r\nconst Residents = ({ residents, setID, keyI, stateID }) => {  \r\n    const [ resident, setResident ] = useState(residents);\r\n    \r\n    useEffect(() =>\r\n        fetch(residents)\r\n        .then(resp => resp.json())\r\n        .then(data => setResident(data))\r\n        )\r\n        \r\n    const visibilityHandle = () => {\r\n        if (stateID !== keyI) {\r\n            setID(keyI);\r\n        } else {\r\n            setID('');\r\n        }\r\n    }\r\n//onclick set keyI u parent stateu. \r\n//ako je keyI različit od stateID vrijednosti ne prikazuj ništa.\r\n//ako se keyI isti kao stateID pokaži podatke\r\n    return (\r\n        <div className='residentsElement'>\r\n            <div>\r\n               <p className='residents' onClick={visibilityHandle}> {resident.name}</p> \r\n            </div>\r\n            {stateID !== keyI && (null)}\r\n            {stateID === keyI && (\r\n            <div>\r\n                <div className='residentInfo'>\r\n                    <p>Height: {resident.height}</p>\r\n                    <p>Hair Color: {resident.hair_color}</p>\r\n                    <p>Birth Year: {resident.birth_year}</p>\r\n                    <p>Gender: {resident.gender}</p>\r\n                </div>\r\n            </div>\r\n            )}\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default Residents;","import React, { useState } from 'react';\r\nimport Residents from './Residents';\r\nimport './Planet.css';\r\n\r\nconst Planet = ({ name, population, gravity, terrain, residents }) => {\r\n  \r\n  const [ childID, setChildID ] = useState('')\r\n\r\n  const setID = (index) => {\r\n    setChildID(index);\r\n  }\r\n\r\n  const residentListComponent = residents.map((residents, i) =>\r\n   {\r\n      return <Residents\r\n      key={i}\r\n      keyI={i}\r\n      residents={residents}\r\n      setID={setID}\r\n      stateID={childID}/>\r\n  })\r\n\r\n  return (\r\n    <div className='planetAll'>\r\n      <div className='planetBackground'>\r\n        <h1 className='planetName'>{name}</h1>\r\n        <div className='planetItems'>\r\n          <h3>Population:</h3>\r\n          <p>{population}</p>\r\n          <h3>Gravity:</h3>\r\n          <p>{gravity}</p>\r\n          <h3>Terrain:</h3>\r\n          <p>{terrain}</p>\r\n          <h3>Characters from here:</h3>\r\n          <div>{residentListComponent}</div>\r\n        </div>  \r\n    </div>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Planet;","import React from 'react';\r\nimport Planet from './Planet';\r\nimport './PlanetList.css';\r\n\r\n\r\nconst PlanetList = ({ planetsforchild }) => {\r\n    const planetListComponent = planetsforchild.map((planet, i) => {\r\n        return <Planet\r\n            key = {i}\r\n            name = {planetsforchild[i].name}\r\n            population = {planetsforchild[i].population}\r\n            gravity = {planetsforchild[i].gravity}\r\n            terrain = {planetsforchild[i].terrain}\r\n            residents = {planetsforchild[i].residents}/>\r\n    })\r\n    return (\r\n    <div className='PlanetList'>\r\n        {planetListComponent}\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default PlanetList;","import React, { Component } from 'react';\nimport './App.css';\nimport PlanetList from '../components/PlanetList';\n\nclass App extends Component {\n\n  constructor () {\n    super();\n    this.state = {\n      planets: []\n    };\n  }\n\n  componentDidMount () {\n    fetch('https://swapi.py4e.com/api/planets/')\n    .then(resp => resp.json())\n    .then(data => {this.setState({ planets: data.results })})\n  }\n  \n  render() {\n    const { planets } = this.state;\n    return (\n      <div className='App'>\n        <header className='App-header'>\n        This site makes calls to swapi.dev api for data on Star Wars planets.\n        </header>\n        <div className='bodyAll'>\n          <div className='intro'>\n            <h1 className='introh1'>STAR WARS <br/> PLANETS</h1>     \n          </div>  \n          <div className='App-MainComponent'>\n            <PlanetList planetsforchild = {planets}/>\n          </div>   \n        </div>\n\n      </div>\n    )\n  }\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}