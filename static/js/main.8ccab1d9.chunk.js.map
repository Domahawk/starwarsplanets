{"version":3,"sources":["components/Residents.js","components/Planet.js","components/PlanetList.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Residents","residents","useState","resident","setResident","visibility","setVisibility","useEffect","fetch","then","resp","json","data","className","onClick","name","height","hair_color","birth_year","gender","Planet","population","gravity","terrain","residentListComponent","map","i","PlanetList","planetsforchild","planetListComponent","planet","App","state","planets","setState","results","this","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2TA2CeA,EAxCG,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UACjB,EAAkCC,mBAASD,GAA3C,mBAAQE,EAAR,KAAkBC,EAAlB,KACA,EAAqCF,mBAAS,aAA9C,mBAAQG,EAAR,KAAoBC,EAApB,KACIC,qBAAU,SAACJ,GAAD,OACNK,MAAMP,GACLQ,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAG,GAAI,OAAIR,EAAYQ,QAAQ,IAY1C,OACI,sBAAKC,UAAU,mBAAf,UACI,8BACG,oBAAGA,UAAU,YAAYC,QAbnB,WAETR,EADe,cAAfD,EACc,UAEA,cASX,cAA8CF,EAASY,UAE1C,cAAfV,GAA+B,KAChB,YAAfA,GACD,8BACI,sBAAKQ,UAAU,eAAf,UACI,yCAAYV,EAASa,UACrB,6CAAgBb,EAASc,cACzB,6CAAgBd,EAASe,cACzB,yCAAYf,EAASgB,mBCJ1BC,G,MAzBA,SAAC,GAAuD,IAArDL,EAAoD,EAApDA,KAAMM,EAA8C,EAA9CA,WAAYC,EAAkC,EAAlCA,QAASC,EAAyB,EAAzBA,QACrCC,EAD8D,EAAhBvB,UACZwB,KAAI,SAACxB,EAAWyB,GAEpD,OAAO,cAAC,EAAD,CAEPzB,UAAYA,GADPyB,MAIT,OACE,gCACA,oBAAIb,UAAU,aAAd,SAA4BE,IAC1B,sBAAKF,UAAU,cAAf,UACE,6CACA,4BAAIQ,IACJ,0CACA,4BAAIC,IACJ,0CACA,4BAAIC,IACJ,uDACA,8BAAMC,YCDCG,G,MAjBI,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,gBACZC,EAAsBD,EAAgBH,KAAI,SAACK,EAAQJ,GACrD,OAAO,cAAC,EAAD,CAEHX,KAAQa,EAAgBF,GAAGX,KAC3BM,WAAcO,EAAgBF,GAAGL,WACjCC,QAAWM,EAAgBF,GAAGJ,QAC9BC,QAAWK,EAAgBF,GAAGH,QAC9BtB,UAAa2B,EAAgBF,GAAGzB,WALzByB,MAOf,OACA,qBAAKb,UAAU,aAAf,SACKgB,MCuBME,E,kDAlCb,aAAgB,IAAD,8BACb,gBACKC,MAAQ,CACXC,QAAS,GACThC,UAAW,IAJA,E,qDAQf,WAAsB,IAAD,OACnBO,MAAM,uCACLC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAG,GAAS,EAAKsB,SAAS,CAAED,QAASrB,EAAKuB,e,oBAG/C,WACE,IAAQF,EAAYG,KAAKJ,MAAjBC,QACR,OACE,sBAAKpB,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,mFAGA,sBAAKA,UAAU,UAAf,UACE,qBAAKA,UAAU,QAAf,SACE,qBAAIA,UAAU,UAAd,uBAAkC,uBAAlC,gBAEF,qBAAKA,UAAU,oBAAf,SACE,cAAC,EAAD,CAAYe,gBAAmBK,gB,GA5BzBI,aCQHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB/B,MAAK,YAAkD,IAA/CgC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.8ccab1d9.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport './Residents.css'\r\n\r\nconst Residents = ({ residents }) => {  \r\n    const [ resident, setResident ] = useState(residents);\r\n    const [ visibility, setVisibility] = useState('invisible');\r\n        useEffect((resident) =>\r\n            fetch(residents)\r\n            .then(resp => resp.json())\r\n            .then(data => setResident(data)), [])\r\n\r\n    const showHide = () => {\r\n        if (visibility === 'invisible') {\r\n            setVisibility('visible');\r\n        } else if (visibility === 'visible') {\r\n            setVisibility('invisible'); \r\n        } else {\r\n            setVisibility('invisible');\r\n        }\r\n    }\r\n        \r\n    return (\r\n        <div className='residentsElement'>\r\n            <div>\r\n               <p className='residents' onClick={showHide}> {resident.name}</p> \r\n            </div>\r\n            {visibility === 'invisible' && (null)}\r\n            {visibility === 'visible' && (\r\n            <div>\r\n                <div className='residentInfo'>\r\n                    <p>Height: {resident.height}</p>\r\n                    <p>Hair Color: {resident.hair_color}</p>\r\n                    <p>Birth Year: {resident.birth_year}</p>\r\n                    <p>Gender: {resident.gender}</p>\r\n                </div>\r\n            </div>\r\n            \r\n            )}\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default Residents;","import React from 'react';\r\nimport Residents from './Residents';\r\nimport './Planet.css';\r\n\r\nconst Planet = ({ name, population, gravity, terrain, residents }) => {\r\n  const residentListComponent = residents.map((residents, i) =>\r\n   {\r\n      return <Residents\r\n      key={i}\r\n      residents ={residents}/>\r\n  })\r\n\r\n  return (\r\n    <div>\r\n    <h1 className='planetName'>{name}</h1>\r\n      <div className='planetItems'>\r\n        <h3>Population:</h3>\r\n        <p>{population}</p>\r\n        <h3>Gravity:</h3>\r\n        <p>{gravity}</p>\r\n        <h3>Terrain:</h3>\r\n        <p>{terrain}</p>\r\n        <h3>Characters from here:</h3>\r\n        <div>{residentListComponent}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Planet;","import React from 'react';\r\nimport Planet from './Planet';\r\nimport './PlanetList.css';\r\n\r\n\r\nconst PlanetList = ({ planetsforchild }) => {\r\n    const planetListComponent = planetsforchild.map((planet, i) => {\r\n        return <Planet\r\n            key = {i}\r\n            name = {planetsforchild[i].name}\r\n            population = {planetsforchild[i].population}\r\n            gravity = {planetsforchild[i].gravity}\r\n            terrain = {planetsforchild[i].terrain}\r\n            residents = {planetsforchild[i].residents}/>\r\n    })\r\n    return (\r\n    <div className='PlanetList'>\r\n        {planetListComponent}\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default PlanetList;","import React, { Component } from 'react';\nimport './App.css';\nimport PlanetList from '../components/PlanetList';\n\nclass App extends Component {\n\n  constructor () {\n    super();\n    this.state = {\n      planets: [],\n      residents: []\n    };\n  }\n\n  componentDidMount () {\n    fetch('https://swapi.py4e.com/api/planets/')\n    .then(resp => resp.json())\n    .then(data => {this.setState({ planets: data.results })})\n  }\n  \n  render() {\n    const { planets } = this.state;\n    return (\n      <div className='App'>\n        <header className='App-header'>\n        This site makes calls to swapi.dev api for data on Star Wars planets.\n        </header>\n        <div className='bodyAll'>\n          <div className='intro'>\n            <h1 className='introh1'>STAR WARS <br/> PLANETS</h1>     \n          </div>  \n          <div className='App-MainComponent'>\n            <PlanetList planetsforchild = {planets}/>\n          </div>   \n        </div>\n\n      </div>\n    )\n  }\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}